<!DOCTYPE html>
<html>
<head>
    <title>Sudoku Solver</title>
    <style>
        body {
	background-color: #ADD8E6; /* light blue */
		}
        table {
            border-collapse: collapse;
            margin: auto;
            margin-bottom: 20px;
            font-size: 20px;
            font-weight: bold;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            border-radius: 10px;
        }
        td {
            width: 30px;
            height: 30px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid black;
            color: #333;
            transition: background-color 0.3s ease;
        }
        td:focus {
            background-color: #f8f8f8;
            outline: none;
        }
        .row-start, .row-end, .col-start, .col-end {
            background-color: #ddd;
        }
        .row-start:nth-child(3n+1), .row-end:nth-child(3n+1),
        .col-start:nth-child(3n+1), .col-end:nth-child(3n+1) {
            background-color: #bbb;
        }
        .row-start:first-child, .row-end:last-child,
        .col-start:first-child, .col-end:last-child {
            border-width: 2px;
        }
        button {
            display: block;
            margin: auto;
            padding: 10px 20px;
            font-size: 24px;
            font-weight: bold;
            background-color: #2196f3;
            color: #fff;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        button:hover {
            background-color: #0d8bf2;
        }
        .button-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
    </style>
</head>
<body>
    <h1 style="text-align: center;font-size: 50px;">SUDOKU SOLVER</h1>
    <table id="sudoku">

        <!-- Table cells will be generated by JavaScript -->
    </table>
    <div class="button-container">
  <button onclick="solve()">Solve</button>
  <button onclick="location.reload()">Clear</button>
</div>

    <script>
        // Sudoku solver code goes here

        // Generate the table cells for the Sudoku grid
        let table = document.getElementById("sudoku");
        for (let i = 0; i < 9; i++) {
            let row = document.createElement("tr");
            for (let j = 0; j < 9; j++) {
                let cell = document.createElement("td");
                cell.id = "cell_" + i + "_" + j;
                cell.contentEditable = true;
                row.appendChild(cell);
            }
            table.appendChild(row);
        }

        function updateGrid() {
            // Get the current values in the grid and update the 2D array
            let grid = [];
            for (let i = 0; i < 9; i++) {
                grid.push([]);
                for (let j = 0; j < 9; j++) {
                    let cell = document.getElementById("cell_" + i + "_" + j);
                    if (cell.innerText) {
                        grid[i].push(parseInt(cell.innerText));
                    } else {
                        grid[i].push(0);
                    }
                }
            }
            return grid;
        }

        function solve() {
            // Solve the Sudoku puzzle and update the table with the solution
            let grid = updateGrid();
            if (solve_sudoku(grid)) {
                for (let i = 0; i < 9; i++) {
                    for (let j = 0; j < 9; j++) {
                        let cell = document.getElementById("cell_" + i + "_" + j);
                        cell.innerText = grid[i][j];
                    }
                }
            } else {
                alert("Unable to solve puzzle");
            }
        function solve_sudoku(grid) {
    // Find the next empty cell
    let empty_cell = find_empty_cell(grid);

    // If there are no empty cells, the puzzle is solved
    if (!empty_cell) {
        return true;
    }

    // Try each possible value for the empty cell
    let row = empty_cell[0];
    let col = empty_cell[1];
    for (let num = 1; num <= 9; num++) {
        if (is_valid(grid, row, col, num)) {
            grid[row][col] = num;
            if (solve_sudoku(grid)) {
                return true;
            }
            grid[row][col] = 0;
        }
    }

    // If no value works, backtrack
    return false;
}

function find_empty_cell(grid) {
    // Find the first empty cell in the grid
    for (let i = 0; i < 9; i++) {
        for (let j = 0; j < 9; j++) {
            if (grid[i][j] === 0) {
                return [i, j];
            }
        }
    }
    return null;
}

function is_valid(grid, row, col, num) {
    // Check if the given number is valid in the given row
    for (let i = 0; i < 9; i++) {
        if (grid[row][i] === num) {
            return false;
        }
    }

    // Check if the given number is valid in the given column
    for (let i = 0; i < 9; i++) {
        if (grid[i][col] === num) {
            return false;
        }
    }

    // Check if the given number is valid in the given 3x3 box
    let box_row = Math.floor(row / 3) * 3;
    let box_col = Math.floor(col / 3) * 3;
    for (let i = box_row; i < box_row + 3; i++) {
        for (let j = box_col; j < box_col + 3; j++) {
            if (grid[i][j] === num) {
                return false;
            }
        }
    }

    // If the number is valid, return true
    return true;
}

        }
    </script>
</body>
</html>